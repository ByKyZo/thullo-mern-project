@mixin display($display: flex, $direction: unset, $justify_content: unset, $align_items: unset) {
    display: $display;
    flex-direction: $direction;
    justify-content: $justify_content;
    align-items: $align_items;
}

@mixin focus($color: $primary) {
    // desactive le focus a 650px
    @media (min-width: 650px) {
        transition: 0.3s;
        &:focus {
            outline: none;
            box-shadow: 0 0 0 2px rgb(255, 255, 255), 0 0 0 4px $color;
        }
    }
}

@mixin hover($color) {
    transform: 0.3s;
    &:hover {
        background-color: darken($color, 20%);
    }
}

@mixin resetLink() {
    text-decoration: none;
    color: inherit;
}

@mixin popup($color) {
    box-sizing: border-box;
    color: $color;
    border: 1px solid $color;
    background-color: $neutralLightest;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    margin-top: 8px;
    display: flex;
    align-items: center;
    padding: 16px;
}

@mixin buttonHover($color) {
    @include focus($color);
    &::before {
        content: '';
        height: 150%;
        width: 150%;
        background-color: darken($color, 10%);
        // background-color: $color;
        // opacity: 0.6;
        position: absolute;
        z-index: -1;
        // transition: cubic-bezier(0.175, 0.885, 0.32, 1.275) 0.4s;
        transition: ease 0.4s;
        border-radius: 999999px;
        transform: scaleY(0);
    }
    &:hover {
        &::before {
            // transform: translateX(0);
            transform: scaleY(1);
        }
    }
}

@mixin button($padding: 'basic', $rounded: 'basic', $type: 'primary', $color: '', $text: white) {
    @include display(flex, unset, center, center);
    cursor: pointer;
    position: relative;
    transition: 0.3s;
    overflow: hidden;
    z-index: 10;
    user-select: none !important;

    @if ($type == 'primary') {
        background-color: $primary;
        color: white;
        @include buttonHover($primary) // @include focus($primary);
;
    }
    @if ($type == 'secondary') {
        background-color: $neutralLight;
        color: $secondary;
        @include buttonHover($neutralLight); // @include focus($primary);
    }
    @if ($type == 'disabled') {
        @include focus(transparent);
        background-color: $neutralMidDark;
        color: $neutralLightest;
        &::before {
            content: '';
            background-color: transparent;
        }
    }
    @if ($type == 'custom') {
        background-color: $color;
        color: $text;
        @include buttonHover($color);
    }

    @if ($type == 'custom-outline') {
        background-color: transparent;
        border: 1px solid $color;
        color: $color;
        @include buttonHover($color);
        &:hover {
            color: $text;
        }
    }

    @if ($rounded == 'basic') {
        border-radius: 8px;
    } @else {
        border-radius: $rounded;
    }
    @if ($padding == 'basic') {
        padding: 10px 14px;
    } @else {
        padding: $padding;
    }
}

@mixin radius($type) {
    @if ($type == 'tiny') {
        border-radius: 4px;
    }
    @if ($type == 'small') {
        border-radius: 8px;
    }
    @if ($type == 'medium') {
        border-radius: 12px;
    }
    @if ($type == 'big') {
        border-radius: 16px;
    }
}

@mixin colorAjust($color) {
    background-color: rgba($color, 0.2);
    color: $color;
}

@mixin componentPreset($hasBorderAndShadow: true) {
    background-color: white;
    padding: 12px;
    @if ($hasBorderAndShadow == true) {
        @include radius('medium');
        border: 1px solid $borderModal;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.08);
    }
}
// FAIRE UNE MARGIN / PADDING PREDEFINI;
@mixin margin() {
}
